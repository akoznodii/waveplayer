//<auto-generated/>
using System;
using System.Diagnostics;
using System.Globalization;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Navigation;

namespace WavePlayer.UI.Behaviors
{
    public static class WebBrowserBehavior
    {
        private static readonly Type OwnerType = typeof(WebBrowserBehavior);

        private static readonly DependencyPropertyKey SilentJavascriptErrorsContextKey = DependencyProperty.RegisterAttachedReadOnly("SilentJavascriptErrorsContext", typeof(SilentJavascriptErrorsContext), OwnerType, new FrameworkPropertyMetadata(null));
        
        public static readonly DependencyProperty BindableSourceProperty = DependencyProperty.RegisterAttached("BindableSource", typeof(string), OwnerType, new UIPropertyMetadata(OnBindableSourcePropertyChanged));

        public static readonly DependencyProperty DisableJavaScriptErrorsProperty = DependencyProperty.RegisterAttached("DisableJavaScriptErrors", typeof(bool), OwnerType, new FrameworkPropertyMetadata(OnDisableJavascriptErrorsChangedCallback));

        [ComImport, Guid("6D5140C1-7436-11CE-8034-00AA006009FA"), InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
        private interface IOleServiceProvider
        {
            [PreserveSig]
            int QueryService([In] ref Guid guidService, [In] ref Guid riid, [MarshalAs(UnmanagedType.IDispatch)] out object ppvObject);
        }

        [AttachedPropertyBrowsableForType(typeof(WebBrowser))]
        public static string GetBindableSource(DependencyObject obj)
        {
            return (string)obj.GetValue(BindableSourceProperty);
        }

        [AttachedPropertyBrowsableForType(typeof(WebBrowser))]
        public static void SetBindableSource(DependencyObject obj, string value)
        {
            obj.SetValue(BindableSourceProperty, value);
        }

        public static void OnBindableSourcePropertyChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs args)
        {
            var browser = dependencyObject as WebBrowser;
            if (browser == null)
            {
                return;
            }

            browser.Source = (args.NewValue != null) ? new Uri(args.NewValue.ToString()) : null;
        }

        [AttachedPropertyBrowsableForType(typeof(WebBrowser))]
        public static void SetDisableJavaScriptErrors(DependencyObject dependencyObject, bool value)
        {
            dependencyObject.SetValue(DisableJavaScriptErrorsProperty, value);
        }

        [AttachedPropertyBrowsableForType(typeof(WebBrowser))]
        public static bool GetDisableJavaScriptErrors(DependencyObject dependencyObject)
        {
            return (bool)dependencyObject.GetValue(DisableJavaScriptErrorsProperty);
        }

        private static void SetSilentJavascriptErrorsContext(DependencyObject depObj, SilentJavascriptErrorsContext value)
        {
            depObj.SetValue(SilentJavascriptErrorsContextKey, value);
        }

        private static SilentJavascriptErrorsContext GetSilentJavascriptErrorsContext(DependencyObject depObj)
        {
            return (SilentJavascriptErrorsContext)depObj.GetValue(SilentJavascriptErrorsContextKey.DependencyProperty);
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Reliability", "CA2000:Dispose objects before losing scope", Justification = "It's OK")]
        private static void OnDisableJavascriptErrorsChangedCallback(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            var webBrowser = d as WebBrowser;
            if (webBrowser == null ||
                Equals(e.OldValue, e.NewValue))
            {
                return;
            }

            var context = GetSilentJavascriptErrorsContext(webBrowser);
            if (context != null)
            {
                context.Dispose();
            }

            if (e.NewValue != null)
            {
                context = new SilentJavascriptErrorsContext(webBrowser);
                SetSilentJavascriptErrorsContext(webBrowser, context);
            }
            else
            {
                SetSilentJavascriptErrorsContext(webBrowser, null);
            }
        }

        private class SilentJavascriptErrorsContext : IDisposable
        {
            private readonly WebBrowser _webBrowser;
            private bool? _silent;

            public SilentJavascriptErrorsContext(WebBrowser webBrowser)
            {
                _silent = new bool?();

                _webBrowser = webBrowser;
                _webBrowser.Loaded += OnWebBrowserLoaded;
                _webBrowser.Navigated += OnWebBrowserNavigated;
            }
            
            public void Dispose()
            {
                if (_webBrowser != null)
                {
                    _webBrowser.Loaded -= OnWebBrowserLoaded;
                    _webBrowser.Navigated -= OnWebBrowserNavigated;
                }
            }

            private void OnWebBrowserLoaded(object sender, RoutedEventArgs e)
            {
                if (!_silent.HasValue)
                {
                    return;
                }

                SetSilent();
            }

            private void OnWebBrowserNavigated(object sender, NavigationEventArgs e)
            {
                var webBrowser = (WebBrowser)sender;

                if (!_silent.HasValue)
                {
                    _silent = GetDisableJavaScriptErrors(webBrowser);
                }

                if (!webBrowser.IsLoaded)
                {
                    return;
                }

                SetSilent();
            }

            /// <summary>
            /// Solution by Simon Mourier on StackOverflow
            /// http://stackoverflow.com/a/6198700/741414
            /// </summary>
            private void SetSilent()
            {
                _webBrowser.Loaded -= OnWebBrowserLoaded;
                _webBrowser.Navigated -= OnWebBrowserNavigated;

                // get an IWebBrowser2 from the document
                var sp = _webBrowser.Document as IOleServiceProvider;
                if (sp != null)
                {
                    var IID_IWebBrowserApp = new Guid("0002DF05-0000-0000-C000-000000000046");
                    var IID_IWebBrowser2 = new Guid("D30C1661-CDAF-11d0-8A3E-00C04FC9E26E");

                    object webBrowser2;
                    var errorCode = sp.QueryService(ref IID_IWebBrowserApp, ref IID_IWebBrowser2, out webBrowser2);

                    if (errorCode != 0)
                    {
                        Debug.WriteLine("Failed to call QueryService to get WebBrowser COM object, object id: {0}, rrror code: {1}", IID_IWebBrowserApp, errorCode);
                    }

                    if (webBrowser2 != null)
                    {
                        webBrowser2.GetType().InvokeMember(
                            "Silent",
                            BindingFlags.Instance | BindingFlags.Public | BindingFlags.PutDispProperty,
                            null,
                            webBrowser2,
                            new object[] { _silent },
                            CultureInfo.InvariantCulture);
                    }
                }
            }
        }
    }
}
